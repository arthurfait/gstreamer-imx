#!/usr/bin/env python


# Try to find one library of a given list
# The first library found is stored in the given uselib_store
def check_lib_list(conf, uselib, uselib_store, lib_list):
	for lib in lib_list:
		if conf.check_cc(mandatory = 0, lib = lib, uselib = uselib, uselib_store = uselib_store):
			return True
	return False

def check_wayland(conf, uselib=''):
    return True

def check_x11(conf, uselib = ''):
	return \
	  conf.check_cc(mandatory = 0, lib = 'X11', uselib = uselib, uselib_store = 'X11') and \
	  conf.check_cc(mandatory = 0, header_name = 'X11/Xlib.h', uselib = uselib, uselib_store = 'X11')

def check_egl(conf, uselib = ''):
	return \
	  conf.check_cc(mandatory = 0, lib = 'EGL', uselib = uselib, uselib_store = 'EGL') and \
	  conf.check_cc(mandatory = 0, header_name = 'EGL/egl.h', uselib = uselib, uselib_store = 'EGL')

def check_openvg(conf, uselib = 'EGL'):
	return \
	  conf.check_cc(mandatory = 0, lib = 'OpenVG', uselib = uselib, uselib_store = 'OPENVG') and \
	  conf.check_cc(mandatory = 0, header_name = 'VG/openvg.h', uselib = uselib, uselib_store = 'OPENVG')

def check_gles1(conf, uselib = 'EGL', lib_list = ['GLESv1_CM', 'GLESV1_CL']):
	retval = \
	  check_lib_list(conf = conf, uselib = uselib, uselib_store = 'GLES1', lib_list = lib_list) and \
	  conf.check_cc(mandatory = 0, header_name = 'GLES/gl.h', uselib = uselib, uselib_store = 'GLES1')
	return retval

def check_gles2(conf, uselib = 'EGL', lib_list = ['GLESv2']):
	retval = \
	  check_lib_list(conf = conf, uselib = uselib, uselib_store = 'GLES2', lib_list = lib_list) and \
	  conf.check_cc(mandatory = 0, header_name = 'GLES2/gl2.h', uselib = uselib, uselib_store = 'GLES2')
	conf.check_cc(mandatory = 0, header_name = ['GLES2/gl2.h', 'GLES2/gl2ext.h'], uselib = uselib, define_name = 'WITH_GL2EXT_H', uselib_store = 'GLES2')
	return retval


def check_viv_texformat(conf, texformat):
	test_code = """
		#include <EGL/egl.h>
		#include <EGL/eglext.h>
		#include <GLES/gl.h>
		#include <GLES/glext.h>
		#include <GLES2/gl2.h>
		#include <GLES2/gl2ext.h>

		int main()
		{
			return (GL_%s) * 0;
		}
	"""
	return conf.check(fragment = (test_code % texformat), mandatory = 0, execute = 0, define_ret = 0, msg = 'Checking for GLES texture format %s' % texformat, uselib = ['EGL', 'GLES'], okmsg = 'yes', errmsg = 'no')  


def configure(conf):
	from waflib.Build import Logs
	conf.env['DEFINES_EGL'] = ['LINUX']

	if (check_x11(conf) or check_wayland(conf)) and \
	  check_egl(conf, 'EGL') and \
	  check_gles2(conf, lib_list = ['GLESv2', 'GLESv2x', 'GLESv2SC']):
		for texfmt in ['VIV_I420', 'VIV_YV12', 'VIV_NV12', 'VIV_NV21', 'VIV_YUY2', 'VIV_UYVY']:
			if check_viv_texformat(conf, texfmt):
				conf.define('HAVE_' + texfmt, 1)
		Logs.pprint('GREEN', 'Modified EGL GLES sink will be built')
		conf.env['EGLVIVSINK_ENABLED'] = 1
	else:
		Logs.pprint('RED', 'Modified EGL GLES sink will not be built - dependencies not found')


def build(bld):
	if bld.env['EGLVIVSINK_ENABLED']:
		bld(
			features = ['c', 'cshlib'],
			includes = ['../..'],
			use = 'gstimxcommon',
			uselib = ['X11', 'GLES1', 'GLES2', 'EGL', 'VIVANTE', 'GSTREAMER_VIDEO'] + bld.env['COMMON_USELIB'],
			target = 'gsteglvivsink',
			defines = ['HAVE_CONFIG_H', 'USE_EGL_X11', 'GST_LICENSE="LGPL"'],
			source = bld.path.ant_glob('*.c'),
			install_path = bld.env['PLUGIN_INSTALL_PATH']
		)

